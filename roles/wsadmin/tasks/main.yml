---
- name: Set timestamp
  set_fact:
    timestamp: "{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"

- name: Set jython template as plain.jython
  set_fact:
    jython_template: plain.jython
  when: jython_command and ansible_check_mode

- name: Set jython template as saveandsync.jython
  set_fact:
    jython_template: saveandsync.jython
  when: jython_command and not ansible_check_mode

- name: Copying jython script based on template {{ jython_template }}
  become: true
  become_user: "{{ was_user }}"
  template:
    src: "{{ jython_template }}"
    dest: "{{ wsadmin_tmp }}/{{ jython_template|basename }}.{{ timestamp }}.jy"
  changed_when: false
  when: jython_template is defined

- name: Running jython script {{ wsadmin_tmp }}/{{ jython_template|basename }}.{{ timestamp }}.jy
  become: true
  become_user: "{{ was_user }}"
  command:
    "{{ wsadmin_cmd }} -lang jython -f '{{ wsadmin_tmp }}/{{ jython_template|basename }}.{{ timestamp }}.jy' {{ wsadmin_params }}"
  when: jython_template is defined

- name: Copying jython script {{ jython_script }}
  become: true
  become_user: "{{ was_user }}"
  copy:
    src: "{{ wsadmin_script }}"
    dest: "{{ wsadmin_tmp }}/{{ jython_script|basename }}"
  when: jython_script is defined

- name: Running jython script {{ wsadmin_tmp }}/{{ jython_script|basename }}
  command:
    "{{ wsadmin_cmd }} -lang jython -f '{{ wsadmin_tmp }}/{{ jython_script|basename }}' {{ wsadmin_params }}"
  when: jython_script is defined

- name: Make sure all clusters are started
  become: true
  become_user: "{{ was_user }}"
  command:
    "{{ wsadmin_cmd }} -lang jython -c 'AdminClusterManagement.startAllClusters()'"
  when: (cluster is defined) and (state == "started") and (cluster == "*")

- name: Make sure all cluster are stopped
  become: true
  become_user: "{{ was_user }}"
  command:
    "{{ wsadmin_cmd }} -lang jython -c 'AdminClusterManagement.stopAllClusters()'"
  when: (cluster is defined) and (state == "stopped") and (cluster == "*")

- name: Make sure cluster {{ cluster }} is started
  become: true
  become_user: "{{ was_user }}"
  command:
    "{{ wsadmin_cmd }} -lang jython -c 'AdminClusterManagement.startSingleCluster(\"{{ cluster }}\")'"
  when: (cluster is defined) and (state == "started") and (cluster != "*") and (app is not defined)

- name: Make sure cluster {{ cluster }} is stopped
  become: true
  become_user: "{{ was_user }}"
  command:
    "{{ wsadmin_cmd }} -lang jython -c 'AdminClusterManagement.stopSingleCluster(\"{{ cluster }}\")'"
  when: (cluster is defined) and (state == "stopped") and (cluster != "*") and (app is not defined)

- name: Make sure application {{ app }} on cluster {{ cluster }} is started
  become: true
  become_user: "{{ was_user }}"
  command:
    "{{ wsadmin_cmd }} -lang jython -c 'AdminApplication.startApplicationOnCluster(\"{{ app }}\", \"{{ cluster }}\")'"
  when: (cluster is defined) and (state == "started") and (cluster != "*") and (app is defined)

- name: Make sure applicaion {{ app }} on cluster {{ cluster }} is stopped
  become: true
  become_user: "{{ was_user }}"
  command:
    "{{ wsadmin_cmd }} -lang jython -c 'AdminApplication.stopApplicationOnCluster(\"{{ app }}\", \"{{ cluster }}\")'"
  when: (cluster is defined) and (state == "stopped") and (cluster != "*") and (app is defined)

- name: Make sure application {{ app }} on all targets on node {{ node }} is started
  become: true
  become_user: "{{ was_user }}"
  command:
    "{{ wsadmin_cmd }} -lang jython -c 'AdminApplication.startApplicationOnAllDeployedTargets(\"{{ app }}\", \"{{ node }}\")'"
  when: (node is defined) and (state == "started") and (app is defined) and (as is not defined)

- name: Make sure application {{ app }} on all targets on node {{ node }} is stopped
  become: true
  become_user: "{{ was_user }}"
  command:
    "{{ wsadmin_cmd }} -lang jython -c 'AdminApplication.stopApplicationOnAllDeployedTargets(\"{{ app }}\", \"{{ node }}\")'"
  when: (node is defined) and (state == "stopped") and (app is defined) and (as is not defined)

- name: Make sure application {{ app }} on application server {{ as }} on node {{ node }} is started
  become: true
  become_user: "{{ was_user }}"
  command:
    "{{ wsadmin_cmd }} -lang jython -c 'AdminApplication.startApplicationOnSingleServer(\"{{ app }}\", \"{{ node }}\", \"{{ as }}\")'"
  when: (node is defined) and (state == "started") and (app is defined) and (as is defined)

- name: Make sure application {{ app }} on appication server {{ as }} on node {{ node }} is stopped
  become: true
  become_user: "{{ was_user }}"
  command:
    "{{ wsadmin_cmd }} -lang jython -c 'AdminApplication.stopApplicationOnSingleServer(\"{{ app }}\", \"{{ node }}\", \"{{ as }}\")'"
  when: (node is defined) and (state == "stopped") and (app is defined) and (as is not defined)

- name: Make sure application server {{ as }} is started
  become: true
  become_user: "{{ was_user }}"
  command:
    "{{ wsadmin_cmd }} -lang jython -c 'AdminControl.startServer(\"{{ as }}\")'"
  when: (as is defined) and (state == "started") and (node is not defined) and (app is not defined)

- name: Make sure application server {{ as }} is stopped
  become: true
  become_user: "{{ was_user }}"
  command:
    "{{ wsadmin_cmd }} -lang jython -c 'AdminControl.startServer(\"{{ as }}\")'"
  when: (as is defined) and (state == "stopped") and (node is not defined) and (app is not defined)

- name: Copy an application file
  become: true
  become_user: "{{ was_user }}"
  copy:
    src: "{{ app_file }}"
    dest: "{{ wsadmin_tmp }}"
    mode: 0700
  when: (app_file is defined) and ((state == "installed") or (state == "updated"))

- name: Install application {{ app }} from {{ app_file }}
  # TODO: on cluster, on application server, ... & more options
  become: true
  become_user: "{{ was_user }}"
  command:
    "{{ wsadmin_cmd }} -lang jython -c 'AdminApp.install(\"{{ wsadmin_tmp }}{{ app_file|basename }}\")'"
  when: (app_file is defined) and (app is defined) and (state == "installed")

- name: Upgrade application {{ app }}
  # TODO: on cluster, on application server, ... & more options
  become: true
  become_user: "{{ was_user }}"
  command:
    "{{ wsadmin_cmd }} -lang jython -c 'AdminApp.update(\"{{ app }}\", \"app\",  -[\"-contents\", \"{{ wsadmin_tmp }}{{ app_file|basename }}\"])'"
  when: (app_file is defined) and (app is defined) and (state == "installed")

- name: Uninstall application {{ app }}
  become: true
  become_user: "{{ was_user }}"
  command:
    "{{ wsadmin_cmd }} -lang jython -c 'AdminApp.uninstall(\"{{ app }}\")'"
  when: (app is defined) and (state == "absent")
